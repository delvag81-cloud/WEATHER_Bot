from datetime import datetime
import logging
import os
import threading

from dotenv import load_dotenv
from flask import Flask
import requests
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ö–µ–ª—Å-—á–µ–∫–∞
app = Flask(__name__)


@app.route("/")
def home():
    return "ü§ñ Weather Bot is running! Use Telegram to interact with the bot."


@app.route("/health")
def health():
    return "‚úÖ Bot is healthy and running!"


def get_weather(city: str = "Saint Petersburg") -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    """
    try:
        params = {
            "q": city,
            "appid": API_KEY,
            "units": "metric",
            "lang": "ru",
        }

        response = requests.get(
            "https://api.openweathermap.org/data/2.5/weather", params=params
        )
        response.raise_for_status()
        data = response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_info = f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {data['name']}**\n\n"
        weather_info += (
            f"‚Ä¢ **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['weather'][0]['description'].capitalize()}\n"
        )
        weather_info += f"‚Ä¢ **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {data['main']['temp']} ¬∞C\n"
        weather_info += f"‚Ä¢ **–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:** {data['main']['feels_like']} ¬∞C\n"
        weather_info += f"‚Ä¢ **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** {data['main']['humidity']}%\n"
        weather_info += f"‚Ä¢ **–î–∞–≤–ª–µ–Ω–∏–µ:** {data['main']['pressure']} –≥–ü–∞\n"

        if "grnd_level" in data["main"]:
            weather_info += (
                f"‚Ä¢ **–î–∞–≤–ª–µ–Ω–∏–µ —É –∑–µ–º–ª–∏:** {data['main']['grnd_level']} –≥–ü–∞\n"
            )

        weather_info += f"‚Ä¢ **–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:** {data['wind']['speed']} –º/—Å\n"

        # –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞
        sunset_timestamp = data["sys"]["sunset"]
        sunset_time = datetime.fromtimestamp(sunset_timestamp).strftime("%H:%M:%S")
        weather_info += f"‚Ä¢ **–ó–∞–∫–∞—Ç:** {sunset_time}\n"

        return weather_info

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã! –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/weather - –ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ
/help - –ü–æ–º–æ—â—å

üåç **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,** –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É —Ç–∞–º!
    """
    await update.message.reply_text(welcome_text)


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ
‚Ä¢ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Ç–∞–º
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "–ú–æ—Å–∫–≤–∞", "London", "–ü–∞—Ä–∏–∂"

üå§Ô∏è –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ OpenWeatherMap
    """
    await update.message.reply_text(help_text)


# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    weather_info = get_weather("Saint Petersburg")
    await update.message.reply_text(weather_info, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥–æ—Ä–æ–¥–æ–≤
async def handle_city_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action="typing"
    )

    weather_info = get_weather(city)
    await update.message.reply_text(weather_info, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")


def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("weather", weather_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥–æ—Ä–æ–¥–æ–≤ (–Ω–µ –∫–æ–º–∞–Ω–¥)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_message)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, handle_unknown))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    return application


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ö–µ–ª—Å-—á–µ–∫–∞"""
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)


def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    application = setup_bot()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("ü§ñ –ë–æ—Ç –ø–æ–≥–æ–¥—ã –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()


if __name__ == "__main__":
    main()
